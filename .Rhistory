grid.arrange(top="Segmentation Analysis: Main Results", tableGrob(calculate_segment_means(df_seg)[[2]], theme=mytheme))
?mktgfunctions
search()
?addcomma
addcomma(3333333)
# The segment means can also be shown visually.
if (!require(flexclust)) install.packages("flexclust")
library(flexclust)
barchart(hc, df, k = selected_solution,
shade = TRUE,
main = "Bar Chart of Standardized Segmentation Variable Means \n Dots show population means \n Bars show segment means \n Difference of means between a segment and the population\n help us describe each segment",
xlab = paste("Segment ", as.character(rep(1:selected_solution)))
)
# How are the segments different in how we can reach/target them?
grid.arrange(top="Targeting Analysis: Main Results", tableGrob(calculate_segment_means(df_targ)[[2]], theme=mytheme))
# Decide what to call your file name; make sure to put .pdf at the end of the name
filename  <-  "Segmentation and Targeting Analysis Results.pdf"
# If the tables are nod displayed properly in the pdf pages, change the
# value for "larger" below to 1.5, 1.7, 1.8, 2, or larger values for larger
# page sizes
larger <-  1
pdf(filename, height=larger*8.5, width=larger*11)
plot(hc, cex = 0.6, hang = -1, labels = FALSE,
xlab= "Each vertical line is a segment and\n segments are being merged into fewer segments\n as we move up the dendogram.",
ylab="Measure of Within-Cluster Sum of Squared Errors (SSE)"
)
rect.hclust(hc, k = selected_solution, border = rainbow(selected_solution))
x <- rev(hc$height)
plot(x[1:20], type="b", col="navy",
main="Scree Plot for Hierarchical clustering",
ylab="Measure of Within-Cluster Sum of Squared Errors (SSE)",
xlab="Number of clusters")
fviz_cluster(list(data = df, cluster = Assigned_Segment))
grid.arrange(tableGrob(segment_sizes, theme=mytheme))
barchart(hc, df, k = selected_solution,
shade = TRUE,
main = "Bar Chart of Standardized Segmentation Variable Means \n Dots show population means \n Bars show segment means \n Difference of means between a segment and the population\n help us describe each segment"
)
grid.arrange(top="Segmentation Analysis: Main Results", tableGrob(calculate_segment_means(df_seg)[[2]], theme=mytheme))
grid.arrange(top="Targeting Analysis: Main Results", tableGrob(calculate_segment_means(df_targ)[[2]], theme=mytheme))
dev.off()
####################################################
#        CLV (Customer Lifetime Value) Analysis    #
####################################################
#    R Codes for Marketing Analytics               #
#    Author: Dr. Moein Khanlari                    #
#    Course: Marketing Analytics                   #
#    Version 1.0                                   #
#    Last updated: 9/14/2020                       #
####################################################
# Remove all variables from memory to start fresh
rm(list=ls())
# If there are plots, delete them to start fresh
if (length(dev.list())!= 0) dev.off()
####################################################
#######      Setting the Working Directory   #######
# The working directory is the folder in which
# we will place our R code and data files.
# Here, I automatically set the working directory
# to the folder that contains THIS R Script
if (!require(rstudioapi)) install.packages("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# If the above code fails, uncomment the setwd() line below
# and type the path of the data file in the quotation marks:
# setwd("Folder_path_goes_here")
# Load a set of functions that the instructor has written
# for this course if they do not already exist in memory
if(!exists("MarketingAnalytics", mode="function"))
source("../z_Extras/MarketingAnalytics_functions.R")
####################################################
# Class demonstration example
customerdata <- read.csv("ProfitGroups_onlinestore.csv", header = TRUE)
transitionmatrix <- read.csv("TransitionMatrix_onlinestore.csv", header = TRUE)
customerdata
transitionmatrix
## Some data preparation
# remove the column of customer group labels
cd <- customerdata[,-1]
tm <- transitionmatrix[,-1]
cd
tm
# extract some customer data from cd
revenue <- cd$RevenuePerPersonEachPeriod
cost <- cd$CostPerPeriod
No_of_customers <- cd$Count
# extract initial number of customers from the data set
n <- cd[,1]
# Make sure rows of the transition matrix sum to 1
if (any(rowSums(tm)!=1)) {
print("STOP: Transition matrix rows should sum to 1!\n")
print("YOU CANNOT CONTINUE UNTIL YOU FIX THIS!")
rm(list=ls())
} else print("Your transition matrix looks fine.")
# Specify the discount rate
discount_rate <- 0.15
# Maximum periods to analyze
periods <- 240
# specify the number of periods to be displayed in tables
displayperiods <- 10
# Average number of new customers each period; Default values: 0
avg_new_customers_each_period <- 0
# Additional new customers due to promotions can be stored in "extra"
# The vector "extra" stores the expected number of new customers due
# to promotions in the first 10 periods of analysis. Defalut values: 0
extra <- c(0,0,0,0,0,0,0,0,0,0)
# Calculate number of customers in each future period
# The number of customers will go down based on the transition matrix data
evolve <- matrix(data=NA, nrow=displayperiods+1, ncol=ncol(tm))
evolve[1,] <- n
for (i in 2:(displayperiods+1)){
new_n <- round(colSums(n*tm),0)
if (i<=length(extra)) new_n[1] <- new_n[1] + extra[i]
if (length(extra)>(displayperiods+1)) print("ERROR: The number of values in the extra vector should not be larger than the value of displayperiods.")
new_n[1] <- new_n[1] + avg_new_customers_each_period
evolve[i,] <- new_n
n <- new_n
}
# Plot of the Number of Customers in each period for each customer group
matplot(evolve, col=rainbow(ncol(tm)), lwd=2, type = c("b"),pch=19, main="Number of customers in each period", ylab="Number of Customers", xlab="Periods")
legend("topleft", legend = names(tm), col=rainbow(ncol(tm)), pch=19)
# Beutify evolve
evolve2 <- data.frame(t(evolve))
rownames(evolve2) <- names(tm)
names(evolve2) <- c("Start", paste(rep("Period",ncol(evolve2)-1),1:displayperiods, sep=" "))
evolve2
# Now, we need to calculate CLV values for each customer group.
# Create a matrix on how each customer may change groups
# over time based on the probabilities in the transition matrix
# This section involves programming the CLV calculations.
# They mainly do the operations needed to calculate the CLVs
# using data matrices, data frames and lists.
# create the data frames and assign initial values
transitions <- list()
netmargins <- list()
groups <- ncol(tm)
periods <- periods + 1 # Add 1 to allow for the inital period.
for (i in 1:groups){
transitions[[i]] <- data.frame(matrix(data=0, nrow = periods, ncol = groups))
# At the beginning, everyone (100%) is in their own group
transitions[[i]][1,i] <- 1
netmargins[[i]] <- c(0,rep(0, periods -1))
}
# Calculate transitions and net margins
for (i in 1:groups){
for (j in 1:(periods-1)){
temp1 <- rep(0,groups)
for (k in 1:groups) temp1 <- temp1 + transitions[[i]][j,k]*as.vector(tm[k,])
transitions[[i]][j+1,] <- temp1
temp2 <- 0
temp3 <- 0
for (k in 1:groups){
temp2 <- temp2 + cost[k]*transitions[[i]][j,k]
temp3 <- temp3 + revenue[k]*transitions[[i]][j+1,k]
}
netmargins[[i]][j+1] <-  temp3  - temp2
}}
# Prepare the CLV table for each customer group
# This section takes results from the previous table, and combines them
# to arrive at the information we need to have.
discount_factor <- (1/(1+discount_rate))^(0:(periods-1)) # Add discount factor
group_clv <- rep(0,groups)
for (i in 1:groups){
discounted_margin <- round(netmargins[[i]]*discount_factor,2)
cumulativedm <- cumsum(discounted_margin)
results <- t(cbind(round(100*transitions[[i]],1), netmargins[[i]],discount_factor,discounted_margin,cumulativedm))
results <- data.frame(round(results,2))
# results <- cbind(results[,1:11],results[,ncol(results)])
names(results) <- c("Start", paste(rep("Period",ncol(results)-1),1:(periods-1), sep=" "))
rownames(results)[1:groups] <- paste(names(tm),rep("Customers",groups), sep = " ")
rownames(results)[(groups+1):(groups+4)] <- c("Net Profit", "Discount Factor", "Discounted Profit", "Cumulated Discounted Profit")
group_clv[i] <- results[nrow(results),ncol(results)]
u <- results[1:groups,]
results[1:groups,] <- apply(u,2, function(u) sprintf( "%.1f%%", u ) )
results[(nrow(results)-3):nrow(results),1] <- " "
transitions[[i]] <- results
}
# Customer base valuation
# Calculate the current dollar value of the customer base
# and put them all in a table called valuation.
Customer_Base <- data.frame(matrix(data=0, nrow=groups, ncol=(periods-1)))
profitrow <- nrow(transitions[[1]])-3
for (i in 1:groups){
Customer_Base[i,] <-  No_of_customers[i]*as.numeric(transitions[[i]][profitrow,-1])
}
total_net_margin <- colSums(Customer_Base)
discountd_total_net_margin <- total_net_margin*discount_factor[-1]
cumulated <- cumsum(discountd_total_net_margin)
valuation <- rbind(Customer_Base,total_net_margin,discountd_total_net_margin,cumulated)
valuation <- valuation[,c(1:10,ncol(valuation))]
# Beutify the valuation table
names(valuation) <- c(paste(rep("Period",10),1:10, sep=" "), "Period 240")
somenames <- paste(names(tm),rep("Group\n Profit Contribution",groups))
row.names(valuation) <- c(somenames, "Total Profit", "Discounted Total Profit", "Cumulated Discounted Profits")
valuation <- round(valuation,-3)
valuation2 <- apply(valuation,2,addcomma)
# Only keep the first 11 columns and the last column of the transitions data frames
for ( i in 1:groups) transitions[[i]] <-transitions[[i]][,c(1:11,periods)]
# Plot a graph of CLV values
names(group_clv) <- names(tm)
group_clv <- rev(group_clv)
group_clv <- group_clv[-1]
myplot <- barplot(group_clv, horiz=FALSE,
col = rainbow(length(group_clv), alpha=0.45),
main = "CLV value for each customer group",
ylab = "Customer Lifetime Value (dollars)",
xlab = "Customer Groups"
)
legend("topleft", inset =0.03, legend = rev(names(group_clv)), fill = rev(rainbow(length(group_clv), alpha=0.45)))
text(x=myplot, y=0.5*group_clv,
labels=paste(rep("$",length(group_clv)), round(group_clv,1), sep=""))
################# save results in a pdf file ############
# Set up some parameters
# Decide what to call your file name; make sure to put .pdf at the end of the name
filename <-  "CLV Analysis Results.pdf"
larger <-  1.2
# If the tables are nod displayed properly in the pdf pages, change the
# value for "larger" above to 1.5, 1.7, 1.8, 2, or larger values to get larger
# page sizes that can contain the tables.
# Create a theme for formatting our tables
if (!require(gridExtra)) install.packages("gridExtra")
library(gridExtra)
mytablecolors = c("#ccffcc", "#ffffcc")
mytheme <- ttheme_minimal(
core=list(bg_params = list(fill =  mytablecolors, col=NA),
fg_params=list(fontface=3)),
colhead=list(fg_params=list(col="navyblue", fontface=4L)),
rowhead=list(fg_params=list(col="black", fontface=3L)))
# Create labels for some tables
tops <- paste(rep("CLV of one customer in the",groups),names(tm),rep("customer group.\n",groups))
mytitle <- paste("In the long run, this firm's customer base is worth\n $",valuation2[nrow(valuation2),ncol(valuation2)],
"\nConsidering the next 10 periods only,\n the customer base is worth\n $",valuation2[nrow(valuation2),ncol(valuation2)-1],sep="")
#Improve the looks of the transaction data for printing
rownames(transitionmatrix) <- transitionmatrix[,1]
transitionmatrix <- transitionmatrix[,-1]
pdf(filename, height=larger*8.5, width=larger*11)
grid.arrange(top="Customer Data", tableGrob(customerdata, theme=mytheme))
grid.arrange(top="Transition Matrix", tableGrob(transitionmatrix, theme=mytheme))
# Plot the table of CLV values
myplot <- barplot(group_clv, horiz=FALSE,
col = rainbow(length(group_clv), alpha=0.45),
main = "CLV value for each customer group",
ylab = "Customer Lifetime Value (dollars)",
xlab = "Customer Groups"
)
legend("topleft", inset =0.03, legend = rev(names(group_clv)), fill = rev(rainbow(length(group_clv), alpha=0.45)))
text(x=myplot, y=0.5*group_clv,
labels=paste(rep("$",length(group_clv)), round(group_clv,1), sep=""))
grid.arrange(top="Number of Customers in Each Period", tableGrob(evolve2, theme=mytheme))
# Plot of the Number of Customers in each period for each customer group
matplot(evolve, col=rainbow(ncol(tm)), lwd=2, type = c("b"),pch=19, main="Number of customers in each period", ylab="Number of Customers", xlab="Periods")
legend("topleft", legend = names(tm), col=rainbow(ncol(tm)), pch=19)
grid.arrange(top=mytitle, tableGrob(valuation2, theme=mytheme))
for (i in 1:(groups-1)) grid.arrange(top=tops[i], tableGrob(transitions[[i]], theme=mytheme))
dev.off()
####################################################
#        CLV (Customer Lifetime Value) Analysis    #
####################################################
#    R Codes for Marketing Analytics               #
#    Author: Dr. Moein Khanlari                    #
#    Course: Marketing Analytics                   #
#    Version 1.0                                   #
#    Last updated: 9/14/2020                       #
####################################################
# Remove all variables from memory to start fresh
rm(list=ls())
# If there are plots, delete them to start fresh
if (length(dev.list())!= 0) dev.off()
####################################################
#######      Setting the Working Directory   #######
# The working directory is the folder in which
# we will place our R code and data files.
# Here, I automatically set the working directory
# to the folder that contains THIS R Script
if (!require(rstudioapi)) install.packages("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# If the above code fails, uncomment the setwd() line below
# and type the path of the data file in the quotation marks:
# setwd("Folder_path_goes_here")
# Load a set of functions that the instructor has written
# for this course if they do not already exist in memory
# if(!exists("MarketingAnalytics", mode="function"))
#   source("../z_Extras/MarketingAnalytics_functions.R")
if (!require(devtools)) install.packages("devtools")
detach(package:mktgfunctions)
devtools::install_github("1moein/mktgfunctions")
library(mktgfunctions)
####################################################
# Class demonstration example
customerdata <- read.csv("ProfitGroups_onlinestore.csv", header = TRUE)
transitionmatrix <- read.csv("TransitionMatrix_onlinestore.csv", header = TRUE)
customerdata
transitionmatrix
# remove the column of customer group labels
cd <- customerdata[,-1]
tm <- transitionmatrix[,-1]
cd
tm
# extract some customer data from cd
revenue <- cd$RevenuePerPersonEachPeriod
cost <- cd$CostPerPeriod
No_of_customers <- cd$Count
# extract initial number of customers from the data set
n <- cd[,1]
# Make sure rows of the transition matrix sum to 1
if (any(rowSums(tm)!=1)) {
print("STOP: Transition matrix rows should sum to 1!\n")
print("YOU CANNOT CONTINUE UNTIL YOU FIX THIS!")
rm(list=ls())
} else print("Your transition matrix looks fine.")
# Specify the discount rate
discount_rate <- 0.15
# Maximum periods to analyze
periods <- 240
# specify the number of periods to be displayed in tables
displayperiods <- 10
# Average number of new customers each period; Default values: 0
avg_new_customers_each_period <- 0
# Additional new customers due to promotions can be stored in "extra"
# The vector "extra" stores the expected number of new customers due
# to promotions in the first 10 periods of analysis. Defalut values: 0
extra <- c(0,0,0,0,0,0,0,0,0,0)
# Calculate number of customers in each future period
# The number of customers will go down based on the transition matrix data
evolve <- matrix(data=NA, nrow=displayperiods+1, ncol=ncol(tm))
evolve[1,] <- n
for (i in 2:(displayperiods+1)){
new_n <- round(colSums(n*tm),0)
if (i<=length(extra)) new_n[1] <- new_n[1] + extra[i]
if (length(extra)>(displayperiods+1)) print("ERROR: The number of values in the extra vector should not be larger than the value of displayperiods.")
new_n[1] <- new_n[1] + avg_new_customers_each_period
evolve[i,] <- new_n
n <- new_n
}
# Plot of the Number of Customers in each period for each customer group
matplot(evolve, col=rainbow(ncol(tm)), lwd=2, type = c("b"),pch=19, main="Number of customers in each period", ylab="Number of Customers", xlab="Periods")
legend("topleft", legend = names(tm), col=rainbow(ncol(tm)), pch=19)
# Beutify evolve
evolve2 <- data.frame(t(evolve))
rownames(evolve2) <- names(tm)
names(evolve2) <- c("Start", paste(rep("Period",ncol(evolve2)-1),1:displayperiods, sep=" "))
evolve2
# create the data frames and assign initial values
transitions <- list()
netmargins <- list()
groups <- ncol(tm)
periods <- periods + 1 # Add 1 to allow for the inital period.
for (i in 1:groups){
transitions[[i]] <- data.frame(matrix(data=0, nrow = periods, ncol = groups))
# At the beginning, everyone (100%) is in their own group
transitions[[i]][1,i] <- 1
netmargins[[i]] <- c(0,rep(0, periods -1))
}
# Calculate transitions and net margins
for (i in 1:groups){
for (j in 1:(periods-1)){
temp1 <- rep(0,groups)
for (k in 1:groups) temp1 <- temp1 + transitions[[i]][j,k]*as.vector(tm[k,])
transitions[[i]][j+1,] <- temp1
temp2 <- 0
temp3 <- 0
for (k in 1:groups){
temp2 <- temp2 + cost[k]*transitions[[i]][j,k]
temp3 <- temp3 + revenue[k]*transitions[[i]][j+1,k]
}
netmargins[[i]][j+1] <-  temp3  - temp2
}}
discount_factor <- (1/(1+discount_rate))^(0:(periods-1)) # Add discount factor
group_clv <- rep(0,groups)
for (i in 1:groups){
discounted_margin <- round(netmargins[[i]]*discount_factor,2)
cumulativedm <- cumsum(discounted_margin)
results <- t(cbind(round(100*transitions[[i]],1), netmargins[[i]],discount_factor,discounted_margin,cumulativedm))
results <- data.frame(round(results,2))
# results <- cbind(results[,1:11],results[,ncol(results)])
names(results) <- c("Start", paste(rep("Period",ncol(results)-1),1:(periods-1), sep=" "))
rownames(results)[1:groups] <- paste(names(tm),rep("Customers",groups), sep = " ")
rownames(results)[(groups+1):(groups+4)] <- c("Net Profit", "Discount Factor", "Discounted Profit", "Cumulated Discounted Profit")
group_clv[i] <- results[nrow(results),ncol(results)]
u <- results[1:groups,]
results[1:groups,] <- apply(u,2, function(u) sprintf( "%.1f%%", u ) )
results[(nrow(results)-3):nrow(results),1] <- " "
transitions[[i]] <- results
}
# Customer base valuation
# Calculate the current dollar value of the customer base
# and put them all in a table called valuation.
Customer_Base <- data.frame(matrix(data=0, nrow=groups, ncol=(periods-1)))
profitrow <- nrow(transitions[[1]])-3
for (i in 1:groups){
Customer_Base[i,] <-  No_of_customers[i]*as.numeric(transitions[[i]][profitrow,-1])
}
total_net_margin <- colSums(Customer_Base)
discountd_total_net_margin <- total_net_margin*discount_factor[-1]
cumulated <- cumsum(discountd_total_net_margin)
valuation <- rbind(Customer_Base,total_net_margin,discountd_total_net_margin,cumulated)
valuation <- valuation[,c(1:10,ncol(valuation))]
# Beutify the valuation table
names(valuation) <- c(paste(rep("Period",10),1:10, sep=" "), "Period 240")
somenames <- paste(names(tm),rep("Group\n Profit Contribution",groups))
row.names(valuation) <- c(somenames, "Total Profit", "Discounted Total Profit", "Cumulated Discounted Profits")
valuation <- round(valuation,-3)
valuation2 <- apply(valuation,2,addcomma)
# Only keep the first 11 columns and the last column of the transitions data frames
for ( i in 1:groups) transitions[[i]] <-transitions[[i]][,c(1:11,periods)]
# Plot a graph of CLV values
names(group_clv) <- names(tm)
group_clv <- rev(group_clv)
group_clv <- group_clv[-1]
myplot <- barplot(group_clv, horiz=FALSE,
col = rainbow(length(group_clv), alpha=0.45),
main = "CLV value for each customer group",
ylab = "Customer Lifetime Value (dollars)",
xlab = "Customer Groups"
)
legend("topleft", inset =0.03, legend = rev(names(group_clv)), fill = rev(rainbow(length(group_clv), alpha=0.45)))
text(x=myplot, y=0.5*group_clv,
labels=paste(rep("$",length(group_clv)), round(group_clv,1), sep=""))
# Set up some parameters
# Decide what to call your file name; make sure to put .pdf at the end of the name
filename <-  "CLV Analysis Results.pdf"
larger <-  1.2
# Create a theme for formatting our tables
if (!require(gridExtra)) install.packages("gridExtra")
library(gridExtra)
mytablecolors = c("#ccffcc", "#ffffcc")
mytheme <- ttheme_minimal(
core=list(bg_params = list(fill =  mytablecolors, col=NA),
fg_params=list(fontface=3)),
colhead=list(fg_params=list(col="navyblue", fontface=4L)),
rowhead=list(fg_params=list(col="black", fontface=3L)))
tops <- paste(rep("CLV of one customer in the",groups),names(tm),rep("customer group.\n",groups))
mytitle <- paste("In the long run, this firm's customer base is worth\n $",valuation2[nrow(valuation2),ncol(valuation2)],
"\nConsidering the next 10 periods only,\n the customer base is worth\n $",valuation2[nrow(valuation2),ncol(valuation2)-1],sep="")
#Improve the looks of the transaction data for printing
rownames(transitionmatrix) <- transitionmatrix[,1]
transitionmatrix <- transitionmatrix[,-1]
pdf(filename, height=larger*8.5, width=larger*11)
grid.arrange(top="Customer Data", tableGrob(customerdata, theme=mytheme))
grid.arrange(top="Transition Matrix", tableGrob(transitionmatrix, theme=mytheme))
# Plot the table of CLV values
myplot <- barplot(group_clv, horiz=FALSE,
col = rainbow(length(group_clv), alpha=0.45),
main = "CLV value for each customer group",
ylab = "Customer Lifetime Value (dollars)",
xlab = "Customer Groups"
)
legend("topleft", inset =0.03, legend = rev(names(group_clv)), fill = rev(rainbow(length(group_clv), alpha=0.45)))
text(x=myplot, y=0.5*group_clv,
labels=paste(rep("$",length(group_clv)), round(group_clv,1), sep=""))
grid.arrange(top="Number of Customers in Each Period", tableGrob(evolve2, theme=mytheme))
# Plot of the Number of Customers in each period for each customer group
matplot(evolve, col=rainbow(ncol(tm)), lwd=2, type = c("b"),pch=19, main="Number of customers in each period", ylab="Number of Customers", xlab="Periods")
legend("topleft", legend = names(tm), col=rainbow(ncol(tm)), pch=19)
grid.arrange(top=mytitle, tableGrob(valuation2, theme=mytheme))
for (i in 1:(groups-1)) grid.arrange(top=tops[i], tableGrob(transitions[[i]], theme=mytheme))
dev.off()
####################################################
#                Conjoint Analysis                 #
####################################################
#    R Codes for Marketing Analytics               #
#    Author: Dr. Moein Khanlari                    #
#    Course: Marketing Analytics                   #
#    Version 1.0                                   #
#    Last updated: 9/14/2020                       #
####################################################
# Remove all variables from memory to start fresh
rm(list=ls())
# If there are plots, delete them to start fresh
if (length(dev.list())!= 0) dev.off()
####################################################
#######      Setting the Working Directory   #######
# The working directory is the folder in which
# we will place our R code and data files.
# Here, I automatically set the working directory
# to the folder that contains THIS R Script
if (!require(rstudioapi)) install.packages("rstudioapi")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# If the above code fails, uncomment the setwd() line below
# and type the path of the data file in the quotation marks:
# setwd("Folder_path_goes_here")
# Load a set of functions that the instructor has written
# for this course if they do not already exist in memory
# if(!exists("MarketingAnalytics", mode="function"))
#   source("../z_Extras/MarketingAnalytics_functions.R")
if (!require(devtools)) install.packages("devtools")
detach(package:mktgfunctions)
devtools::install_github("1moein/mktgfunctions")
library(mktgfunctions)
####################################################
# Let's take a look at the design matrix
(DesignTable <- read.csv(file="Tablet_levels_attributes.csv",na.strings=c("","NA")))
# Read the data from a .CSV Excel file and place it in a new variable:
(df_products <- read.csv(file="Tablet_survey_products.csv"))             # READ PRODUCT PROFILES DATA
df_ratings <-  read.csv(file="Tablet_survey_ratings.csv")             # READ RATINGS DATA
(myratings <- data.frame(t(df_ratings)))
# Load New product alternative
(alternatives <- read.csv(file="Tablet_New_Product_Alternatives.csv"))
alts_with_names <- alternatives
row.names(alts_with_names) <- names(DesignTable)[2:ncol(DesignTable)]
alts_with_names
# Load competitors products
(competitors <- read.csv(file="Tablet_competitors.csv"))
comps_with_names <- competitors
row.names(comps_with_names) <- names(DesignTable)[2:ncol(DesignTable)]
comps_with_names
#A minor renaming to make product profile names consistent across different projects or data sets.
names(df_products) <- paste0(rep("prod",ncol(df_products)),1:ncol(df_products))
myproducts = data.frame(t(df_products))
# Estimate Partworths
pws <- Estimate_Partworth_Utilities(myratings,myproducts)
search()
ls("package:mktgfunctions")
